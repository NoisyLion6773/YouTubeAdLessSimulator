@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<div class="input-group">
    <input class="@CssClass"
           @bind="SearchTerm"
           @onkeydown="HandleKeyDown"
           placeholder="@placeholder" />
    <button class="btn btn-outline-light" @onclick="SearchAsync">🔎</button> <!-- Einfach nur SearchAsync aufrufen! -->
</div>

@if (!string.IsNullOrEmpty(HtmlResultContent))
{
    @HtmlResult
}
else if (NavigationManager.Uri.Contains("/search") && string.IsNullOrEmpty(HtmlResultContent))
{
    <br />
    <div>Unfortunately, I have to tell you that this search is not valid</div>
}

@code {
    [Parameter]
    public string CssClass { get; set; } = "form-control input-lg";

    [Parameter]
    public string placeholder { get; set; }

    [Parameter]
    public string SearchTerm { get; set; }

    private string HtmlResultContent { get; set; } // zum Halten des HTML Inhalts
    private MarkupString HtmlResult => new MarkupString(HtmlResultContent ?? "");

    private async Task SearchAsync() // Asynchrone Suche
    {
        if (string.IsNullOrWhiteSpace(SearchTerm)) // Überprüfe, ob der Suchbegriff leer ist
            return;

        var url = $"https://youtube.com/search?q={Uri.EscapeDataString(SearchTerm)}"; // Erstelle die URL 🌐

        try
        {
            var response = await HttpClient.GetAsync(url); // Sende Anfrage
            if (response.IsSuccessStatusCode)
            {
                var htmlContent = await response.Content.ReadAsStringAsync(); // Hol den HTML-Inhalt

                // Links anpassen
                var modifiedHtml = htmlContent.Replace("href=\"watch\"", "href=\"video\"")
                                              .Replace("href=\"shorts\"", "href=\"video?q\"");

                // Setze den HTML Content
                HtmlResultContent = modifiedHtml;

                // Navigiere nach erfolgreicher Suche
                var encodedQuery = Uri.EscapeDataString(SearchTerm);
                NavigationManager.NavigateTo($"/search?q={encodedQuery}"); // Navigieren 🔍➡️
            }
            else
            {
                HtmlResultContent = $"<div>Loading ERROR: {response.StatusCode}</div>";
            }
        }
        catch (Exception ex)
        {
            HtmlResultContent = $"<div>ERROR: {ex.Message}</div>"; // Fehlerbehandlung 🔴
        }
        StateHasChanged(); // Aktualisiere den Zustand! 🔄
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchAsync();
        }
    }
}