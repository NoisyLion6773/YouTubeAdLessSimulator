@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<div class="input-group">
    <input class="@CssClass"
           @bind="SearchTerm"
           @onkeydown="HandleKeyDown"
           placeholder="@placeholder" />
    <button class="btn btn-outline-light" @onclick="SearchAsync">🔎</button>
</div>

@if (!string.IsNullOrEmpty(HtmlResultContent))
{
    @HtmlResult
}
else if (NavigationManager.Uri.Contains("/results") && string.IsNullOrEmpty(HtmlResultContent))
{
    <br />
    <div>Unfortunately, I have to tell you that this search is not valid</div>
}

@code {
    [Parameter]
    public string CssClass { get; set; } = "form-control input-lg";

    [Parameter]
    public string placeholder { get; set; }

    [Parameter]
    public string? SearchTerm { get; set; } = string.Empty; // Initialize to avoid null binding

    private string HtmlResultContent { get; set; } // Variable to hold HTML content
    private MarkupString HtmlResult => new MarkupString(HtmlResultContent ?? "");

    private async Task SearchAsync() // Asynchronous search method
    {
        if (string.IsNullOrWhiteSpace(SearchTerm)) // Check if the search term is empty
            return;

        var url = $"https://youtube.com/results?search_query={Uri.EscapeDataString(SearchTerm)}"; // Create the URL

        try
        {
            var response = await HttpClient.GetAsync(url); // Send request
            if (response.IsSuccessStatusCode)
            {
                var htmlContent = await response.Content.ReadAsStringAsync(); // Get the HTML content

                // Extract video and shorts results
                var videoResults = ExtractResults(htmlContent, "watch"); // Extract links to videos
                var shortResults = ExtractResults(htmlContent, "shorts"); // Extract links to shorts

                // Combine results
                HtmlResultContent = $"{videoResults}{shortResults}";

                // Navigate after successful search
                var encodedQuery = Uri.EscapeDataString(SearchTerm);
                NavigationManager.NavigateTo($"/results?search_query={encodedQuery}"); // Navigate 🔍➡️
            }
            else
            {
                HtmlResultContent = $"<div>Loading ERROR: {response.StatusCode}</div>";
            }
        }
        catch (Exception ex)
        {
            HtmlResultContent = $"<div>ERROR: {ex.Message}</div>"; // Error handling 🔴
        }
        StateHasChanged(); // Update the state! 🔄
    }

    private string ExtractResults(string htmlContent, string path)
    {
        // Simple parsing - in a production scenario, use a proper HTML parser
        var resultHtml = "";

        // Find the relevant sections based on the path (video or shorts)
        // This won't actually work without proper parsing, consider using libraries like HtmlAgilityPack
        var startTag = $"<a href=\"/{path}\""; // Adjust this for actual extraction logic
        var endTag = "</a>";

        int startIndex = 0;
        while ((startIndex = htmlContent.IndexOf(startTag, startIndex)) >= 0)
        {
            int endIndex = htmlContent.IndexOf(endTag, startIndex) + endTag.Length;
            if (endIndex > startIndex)
            {
                string resultSnippet = htmlContent.Substring(startIndex, endIndex - startIndex);
                resultHtml += resultSnippet; // Add found snippet to resultHtml
            }
            startIndex = endIndex;
        }

        return resultHtml;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e) // Handle key down events
    {
        if (e.Key == "Enter")
        {
            await SearchAsync(); // Trigger search on Enter key
        }
    }
}