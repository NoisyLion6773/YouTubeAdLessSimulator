@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="input-group-text">
    <input @ref="InputRef"
           class="@InputClass"
           type="@InputType"
           aria-label="@InputAriaLabel"
           @bind="Link"
           @onkeydown="HandleKeyDown"
           placeholder="@InputPlaceholder" />
    &nbsp;@*That's just space key*@&nbsp;
    <button class="@ButtonClass"
            type="@ButtonType"
            @onclick="LaunchAsync">
        @ButtonContent
    </button>
</div>


@code {

    private ElementReference InputRef; // Referenz auf das Input-Feld! 🆗

    [Parameter]
    public string InputClass { get; set; } = "form-control input-lg"; // CSS-Klasse für das Input-Feld 🎨

    [Parameter]
    public string ButtonClass { get; set; }

    [Parameter]
    public string ButtonContent { get; set; }

    [Parameter]
    public string InputType { get; set; }

    [Parameter]
    public string ButtonType { get; set; }

    [Parameter]
    public string InputAriaLabel { get; set; }

    [Parameter]
    public string InputPlaceholder { get; set; } // Platzhalter-Text im Input ✍️

    public string Link { get; set; } // Link/ID für das Video 📺🎥

    private async Task LaunchAsync() // Methode zum Navigieren auf die Video-Seite! 🚀
    {
        if (string.IsNullOrEmpty(Link) || string.IsNullOrWhiteSpace(Link))
        {
            return;
        }
        List<string> parts = Link.Split('/').ToList();
        if (Link.Contains("http"))
        {
            parts.RemoveRange(0, 2);
        }
        else
        {

        }
        parts.RemoveRange(0, 1);
        string newLink = "";
        foreach (var item in parts)
        {
            newLink += "/";
            newLink += item;
        }
        NavigationManager.NavigateTo($"{newLink}");
        StateHasChanged(); // Aktualisiere den Status, falls nötig! 🔄
    }

    private async Task HandleKeyDown(KeyboardEventArgs e) // Handle die Tasteneingabe! ⌨️
    {
        if (e.Key == "Enter") // Wenn die Enter-Taste gedrückt wird! 🎉
        {
            // Ruft die JavaScript-Funktion auf, um den Tabulator zu simulieren! 🔥
            await JSRuntime.InvokeVoidAsync("simulateTab", InputRef.Id);

            // Hier kannst du den LaunchAsync-Call behalten, wenn du das möchtest!
            await LaunchAsync(); // Führe die Launch-Methode aus! 🚀
        }
    }
}