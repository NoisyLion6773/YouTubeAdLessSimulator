@using System.Text.RegularExpressions
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<div class="input-group-text" >
    <input @ref="InputRef"
           class="@InputClass"
           @bind="SearchTerm"
           @onkeydown="HandleKeyDown"
           placeholder="@InputPlaceholder"
           type="@InputType"
           aria-label="@InputAriaLabel" />
    <button type="@ButtonType"
            class="@ButtonClass"
            @onclick="SearchAsync">
        @ButtonContent
    </button>
</div>

@if (!string.IsNullOrEmpty(HtmlResultContent))
{
    @HtmlResult
}
else if (NavigationManager.Uri.Contains("/results") && string.IsNullOrEmpty(HtmlResultContent))
{
    <br />
    <div>Unfortunately, I have to tell you that this search is not valid</div>
}

@code {
    [Parameter]
    public string ButtonContent { get; set; }

    [Parameter]
    public string InputClass { get; set; } = "form-control input-lg";

    [Parameter]
    public string ButtonClass { get; set; } = "btn btn-outline-light";

    [Parameter]
    public string InputType { get; set; }

    [Parameter]
    public string ButtonType { get; set; }

    [Parameter]
    public string InputAriaLabel { get; set; }

    [Parameter]
    public string InputPlaceholder { get; set; }

    [Parameter]
    public string? SearchTerm { get; set; } = string.Empty; // Initialize to avoid null binding

    private string HtmlResultContent { get; set; } // Variable to hold HTML content
    private MarkupString HtmlResult => new MarkupString(HtmlResultContent ?? "");
    ElementReference InputRef;

    private async Task SearchAsync() // Asynchronous search method
    {
        if (string.IsNullOrWhiteSpace(SearchTerm)) // Check if the search term is empty
            return;

        var url = $"https://www.youtube.com/results?search_query={Uri.EscapeDataString(SearchTerm)}"; // Create the URL

        try
        {
            var response = await HttpClient.GetAsync(url); // Send request
            if (response.IsSuccessStatusCode)
            {
                var htmlContent = await response.Content.ReadAsStringAsync(); // Get the HTML content

                // Extract video and shorts results
                var results = ExtractResults(htmlContent); // Extract links to videos
                // var shortResults = ExtractResults(htmlContent, "shorts"); // Extract links to shorts

                // Combine results
                HtmlResultContent = $"{results}";

                // Navigate after successful search
                var encodedQuery = Uri.EscapeDataString(SearchTerm);
                NavigationManager.NavigateTo($"/results?search_query={encodedQuery}"); // Navigate 🔍➡️
            }
            else
            {
                HtmlResultContent = $"<div>Loading ERROR: {response.StatusCode}</div>";
            }
        }
        catch (Exception ex)
        {
            HtmlResultContent = $"<div>ERROR: {ex.Message}</div>"; // Error handling 🔴
        }
        StateHasChanged(); // Update the state! 🔄
    }

    private string ExtractResults(string htmlContent)
    {
        if (string.IsNullOrEmpty(htmlContent))
            return string.Empty;

        var regex = new Regex(@"<a\s+[^>]*href\s*=\s*""([^""]+)""[^>]*>(.*?)<\/a>", RegexOptions.IgnoreCase | RegexOptions.Singleline);

        var matches = regex.Matches(htmlContent);

        var htmlParts = new List<string>();

        foreach (Match m in matches)
        {
            var href = m.Groups[1].Value;
            var linkText = m.Groups[2].Value;

            if (!(href.StartsWith("/watch?v=") || href.StartsWith("/shorts/")))
                continue;

            string videoId = "";

            if (href.StartsWith("/watch?v="))
            {
                // Extrahiere VideoId nach "/watch?v="
                videoId = href.Substring("/watch?v=".Length);
            }
            else if (href.StartsWith("/shorts/"))
            {
                // Extrahiere VideoId nach "/shorts/"
                videoId = href.Substring("/shorts/".Length);
            }

            // Vorschaubild-URL
            string imgSrc = $"https://img.youtube.com/vi/{videoId}/hqdefault.jpg";

            string htmlBlock = $@"
            <div style=""margin-bottom:15px;"">
                <img src=""{imgSrc}"" alt=""Thumbnail"" style=""max-width:200px; display:block; margin-bottom:5px;"" />
                <a href=""{href}"">{linkText}</a>
            </div>";

            htmlParts.Add(htmlBlock.Trim());
        }

        return string.Join("\n", htmlParts);
    }
    private async Task HandleKeyDown(KeyboardEventArgs e) // Handle key down events
    {
        if (e.Key == "Enter")
        {
            await JSRuntime.InvokeVoidAsync("blurElement", InputRef);
            await SearchAsync(); // Trigger search on Enter key
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await SearchAsync();
        await base.OnParametersSetAsync();
    }
}